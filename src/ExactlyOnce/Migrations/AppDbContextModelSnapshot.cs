// <auto-generated />
using System;
using System.Collections.Generic;
using ExactlyOnce.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExactlyOnce.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("exactly_once")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExactlyOnce.Entities.InboxMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Dictionary<string, string>>("Headers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("headers");

                    b.Property<string>("IdempotenceKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idempotence_key");

                    b.Property<long>("Offset")
                        .HasColumnType("bigint")
                        .HasColumnName("offset");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasColumnName("partition");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("payload");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("topic");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.HasIndex("Topic", "Partition", "Offset")
                        .HasDatabaseName("ix_inbox_messages_topic_partition_offset");

                    b.ToTable("inbox_messages", "exactly_once");
                });

            modelBuilder.Entity("ExactlyOnce.Entities.InboxMessageOffset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("available_after")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("LastProcessedOffset")
                        .HasColumnType("bigint")
                        .HasColumnName("last_processed_offset");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasColumnName("partition");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("topic");

                    b.HasKey("Id")
                        .HasName("pk_inbox_message_offsets");

                    b.HasIndex("Topic", "Partition")
                        .IsUnique()
                        .HasDatabaseName("ix_inbox_message_offsets_topic_partition");

                    b.ToTable("inbox_message_offsets", "exactly_once");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableAfter = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastProcessedOffset = 0L,
                            Partition = 0,
                            Topic = "topic-1"
                        },
                        new
                        {
                            Id = 2,
                            AvailableAfter = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastProcessedOffset = 0L,
                            Partition = 0,
                            Topic = "topic-2"
                        });
                });

            modelBuilder.Entity("ExactlyOnce.Entities.ProcessedInboxMessage", b =>
                {
                    b.Property<string>("IdempotenceKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idempotence_key");

                    b.HasKey("IdempotenceKey")
                        .HasName("pk_processed_inbox_messages");

                    b.ToTable("processed_inbox_messages", "exactly_once");
                });
#pragma warning restore 612, 618
        }
    }
}
